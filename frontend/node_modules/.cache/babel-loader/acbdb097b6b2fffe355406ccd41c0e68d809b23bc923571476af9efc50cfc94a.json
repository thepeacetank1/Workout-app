{"ast":null,"code":"import { sync, cancelSync } from '../../../frameloop/index.mjs';\nimport { frameData } from '../../../frameloop/data.mjs';\nconst frameloopDriver = update => {\n  const passTimestamp = ({\n    timestamp\n  }) => update(timestamp);\n  return {\n    start: () => sync.update(passTimestamp, true),\n    stop: () => cancelSync.update(passTimestamp),\n    /**\n     * If we're processing this frame we can use the\n     * framelocked timestamp to keep things in sync.\n     */\n    now: () => frameData.isProcessing ? frameData.timestamp : performance.now()\n  };\n};\nexport { frameloopDriver };","map":{"version":3,"names":["sync","cancelSync","frameData","frameloopDriver","update","passTimestamp","timestamp","start","stop","now","isProcessing","performance"],"sources":["/home/cmlsrandolph/Documents/coding-projects/workout-app/frontend/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs"],"sourcesContent":["import { sync, cancelSync } from '../../../frameloop/index.mjs';\nimport { frameData } from '../../../frameloop/data.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,UAAU,QAAQ,8BAA8B;AAC/D,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAChC,MAAMC,aAAa,GAAGA,CAAC;IAAEC;EAAU,CAAC,KAAKF,MAAM,CAACE,SAAS,CAAC;EAC1D,OAAO;IACHC,KAAK,EAAEA,CAAA,KAAMP,IAAI,CAACI,MAAM,CAACC,aAAa,EAAE,IAAI,CAAC;IAC7CG,IAAI,EAAEA,CAAA,KAAMP,UAAU,CAACG,MAAM,CAACC,aAAa,CAAC;IAC5C;AACR;AACA;AACA;IACQI,GAAG,EAAEA,CAAA,KAAMP,SAAS,CAACQ,YAAY,GAAGR,SAAS,CAACI,SAAS,GAAGK,WAAW,CAACF,GAAG,CAAC;EAC9E,CAAC;AACL,CAAC;AAED,SAASN,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}